name: Daily News Digest

on:
  schedule:
    # Run daily at 7:00 AM UTC (8:00 AM MEZ/Winterzeit)
    # Note: Adjust to '0 6 * * *' for Sommerzeit (MESZ)
    - cron: '0 7 * * *'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Allow pushing commits back to repo

env:
  PYTHON_VERSION: '3.11'

jobs:
  generate-digest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install --system feedparser requests python-dotenv anthropic claude-agent-sdk

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code

      - name: Stage 1 - Fetch RSS Feeds
        run: |
          python src/pipeline/stage1_fetch.py
          echo "âœ… Stage 1 complete"

      - name: Stage 2 - Aggregate Articles
        run: |
          python src/pipeline/stage2_aggregate.py
          echo "âœ… Stage 2 complete"

      - name: Stage 2.5 - Deduplicate (last 7 days)
        run: |
          python src/pipeline/stage2_5_deduplicate.py
          echo "âœ… Stage 2.5 complete"

      - name: Stage 3 - Keyword Filter
        run: |
          # Get latest deduplicated file
          LATEST_DEDUP=$(ls -t data/deduplicated/*.json | head -n1)
          python src/pipeline/stage3_keyword_filter.py "$LATEST_DEDUP"
          echo "âœ… Stage 3 complete"

      - name: Stage 4 - Claude Filter
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        run: |
          # Clean old digests from checkout
          rm -f data/filtered/digest_*.md
          # Get latest keyword-filtered file
          LATEST_FILTERED=$(ls -t data/filtered_keywords/*.json | head -n1)
          python src/pipeline/stage4_filter.py "$LATEST_FILTERED" 4
          echo "âœ… Stage 4 complete"

      - name: Stage 5 - Post to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # Get the digest we just created (only one should exist)
          LATEST_DIGEST=$(ls data/filtered/digest_*.md | head -n1)
          python src/pipeline/stage5_discord_webhook.py "$LATEST_DIGEST"
          echo "âœ… Stage 5 complete"

      - name: Commit results to repository
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Add all data files
          git add data/

          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Create commit with date
            COMMIT_DATE=$(date +%Y-%m-%d)
            git commit -m "Daily digest: $COMMIT_DATE

          ðŸ¤– Generated with GitHub Actions

          Pipeline stages:
          - âœ… RSS Fetch
          - âœ… Aggregate
          - âœ… Deduplicate
          - âœ… Embedding Filter
          - âœ… Claude Filter
          - âœ… Discord Post"

            git push
            echo "âœ… Results committed to repository"
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ github.run_number }}
          path: |
            data/filtered/digest_*.md
            data/embedded/*.json
          retention-days: 30

      - name: Summary
        if: always()
        run: |
          echo "## Daily Digest Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date +%Y-%m-%d)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count articles at each stage
          AGG_COUNT=$(jq '.articles | length' data/aggregated/*.json 2>/dev/null | tail -n1 || echo "0")
          DEDUP_COUNT=$(jq '.articles | length' data/deduplicated/*.json 2>/dev/null | tail -n1 || echo "0")
          EMBED_COUNT=$(jq '.articles | length' data/embedded/*.json 2>/dev/null | tail -n1 || echo "0")

          echo "### Pipeline Stats" >> $GITHUB_STEP_SUMMARY
          echo "- Stage 2 (Aggregated): $AGG_COUNT articles" >> $GITHUB_STEP_SUMMARY
          echo "- Stage 2.5 (Deduplicated): $DEDUP_COUNT articles" >> $GITHUB_STEP_SUMMARY
          echo "- Stage 3 (Filtered): $EMBED_COUNT articles" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Digest posted to Discord!" >> $GITHUB_STEP_SUMMARY
